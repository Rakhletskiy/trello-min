{"version":3,"sources":["actions/cards-actions.js","helpers/reorderCards.js","components/button-add/buton-add.js","actions/column-actions.js","components/card-edit/card-edit.js","components/card/card.js","components/column/column.js","components/app/app.js","reducers/trello.js","store.js","index.js"],"names":["reorderCards","source","destination","dispatch","getState","newColumns","columns","sourceCardIndex","index","sourceId","droppableId","destinationCardIndex","destinationId","sourceColumnIndex","parseInt","replace","destinationColumnIndex","map","column","currentColumnIndex","cards","splice","sourceCard","destinationCards","Array","from","reorderCardsHelper","localStorage","setItem","JSON","stringify","type","connect","state","newCardText","onAddCard","setIsAdding","colIndex","updateColumn","newCards","push","alert","addNewCardText","text","payload","onAddCol","colTitle","title","props","useState","isAdding","className","isAddingColumn","onChange","e","target","value","rows","placeholder","autoFocus","onClick","icon","block","setNewCardText","cardIndex","label","inputText","setInputText","measuredRef","useCallback","node","focus","setSelectionRange","length","ref","setIsEdit","size","onDelCard","isEdit","draggableId","provided","innerRef","draggableProps","dragHandleProps","onDelCol","empty","droppableProps","card","key","App","onDragEnd","result","this","fetchData","setInitialColumns","Math","random","onReorder","React","Component","getItem","parse","initialColumns","initialState","trello","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b919379.chunk.js","sourcesContent":["import reorderCardsHelper from '../helpers/reorderCards';\r\n\r\nexport const addNewCardText = text => dispatch => dispatch({ type: 'ADD_NEW_CARD_TEXT', payload: text });\r\n\r\nexport const onAddCard = (newCardText, colIndex) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // copy current column obj\r\n  let updateColumn = state.columns[colIndex];\r\n  let newCards = updateColumn.cards;\r\n\r\n  // push new card to temporary cards array\r\n  newCardText !== '' && newCardText !== null ? newCards.push(newCardText) : alert('Set card name please');\r\n\r\n  updateColumn.cards = newCards;\r\n\r\n  // delete current column and replace it with updating column\r\n  const newColumns = [...state.columns];\r\n  newColumns.splice(colIndex, 1, updateColumn);\r\n\r\n  // set updated columns to local storage\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'ADD_CARD',\r\n    columns: newColumns,\r\n    newCardText: ''\r\n  });\r\n};\r\n\r\nexport const onDelCard = (colIndex, cardIndex) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // copy current column obj\r\n  let updateColumn = state.columns[colIndex];\r\n\r\n  // delete clicked card\r\n  updateColumn.cards.splice(cardIndex, 1);\r\n\r\n  // delete current column and replace it with updating column\r\n  const newColumns = [...state.columns];\r\n  newColumns.splice(colIndex, 1, updateColumn);\r\n\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'DELETE_CARD',\r\n    columns: newColumns\r\n  });\r\n};\r\n\r\nexport const setNewCardText = (text, colIndex, cardIndex) => (dispatch, getState) => {\r\n  const state = getState();\r\n  // copy current columns array\r\n  let newColumns = [...state.columns];\r\n\r\n  // rewrite card item\r\n  newColumns[colIndex].cards[cardIndex] = text;\r\n\r\n  // update localstorage\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'EDIT_CARD',\r\n    columns: newColumns\r\n  });\r\n};\r\n\r\nexport const reorderCards = ({ source, destination }) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // get reordered columns array\r\n  const newColumns = reorderCardsHelper({\r\n    columns: state.columns,\r\n    source,\r\n    destination\r\n  });\r\n\r\n  // set to the storage\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'REORDER_CARDS',\r\n    columns: newColumns\r\n  });\r\n};\r\n\r\n","export default ({ columns, source, destination }) => {\r\n  const { index: sourceCardIndex, droppableId: sourceId } = source;\r\n  const { index: destinationCardIndex, droppableId: destinationId } = destination;\r\n\r\n  // get indexes of source and destination columns\r\n  const sourceColumnIndex = parseInt(sourceId.replace('column-', ''));\r\n  const destinationColumnIndex = parseInt(destinationId.replace('column-', ''));\r\n\r\n  return columns.map((column, currentColumnIndex) => {\r\n    if (destinationColumnIndex === currentColumnIndex) {\r\n      // get source card\r\n      const [sourceCard] = columns[sourceColumnIndex].cards.splice(sourceCardIndex, 1);\r\n\r\n      // get destination array of cards\r\n      const destinationCards = Array.from(columns[destinationColumnIndex].cards);\r\n\r\n      // put source card in destination array\r\n      // to the right place\r\n      destinationCards.splice(destinationCardIndex, 0, sourceCard);\r\n\r\n      // update cards array\r\n      column.cards = destinationCards;\r\n    }\r\n\r\n    return column;\r\n  });\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Button, Icon } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { onAddCard, onAddCol, addNewCardText } from '../../actions';\r\n\r\nimport './button-add.sass';\r\n\r\nconst ButtonAdd = props => {\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  return isAdding ? (\r\n    <div className={props.isAddingColumn ? 'adding-card card-is-adding-column' : 'adding-card'}>\r\n      <textarea onChange={e => props.addNewCardText(e.target.value)} rows='3' placeholder='type here...' autoFocus></textarea>\r\n      <div className='adding-card-btn-wrapper'>\r\n        <Button\r\n          onClick={() => (!props.isAddingColumn ? props.onAddCard(props.newCardText, props.index, setIsAdding) : props.onAddCol(props.newCardText, setIsAdding))}\r\n          className='adding-card-add'\r\n          type='primary'\r\n        >\r\n          ADD\r\n        </Button>\r\n        <Icon onClick={() => setIsAdding(false)} className='adding-card-close' type='close' />\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <Button onClick={() => setIsAdding(true)} className={props.isAddingColumn ? 'btn-add btn-is-adding-column' : 'btn-add'} icon='plus' block>\r\n      {props.text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    newCardText: state.newCardText\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAddCard: (newCardText, index, setIsAdding) => dispatch(onAddCard(newCardText, index, setIsAdding)),\r\n    addNewCardText: text => dispatch(addNewCardText(text)),\r\n    onAddCol: (text, setIsAdding) => dispatch(onAddCol(text, setIsAdding))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonAdd);\r\n","export const setInitialColumns = () => dispatch => {\r\n  // define initial columns\r\n  const initialColumns = [\r\n    { title: 'Example column 1', cards: ['example card 1.1 (draggable)', 'example card 1.2 (draggable)'] },\r\n    { title: 'Example column 2', cards: ['example card 2.1 (draggable)'] }\r\n  ];\r\n\r\n  // get current columns for check\r\n  const currColumns = localStorage.getItem('columns');\r\n\r\n  if (currColumns == null) {\r\n    // set initial columns in localStorage\r\n    localStorage.setItem('columns', JSON.stringify(initialColumns));\r\n\r\n    // set initial columns in redux\r\n    return dispatch({\r\n      type: 'SET_INITIAL_COLUMNS',\r\n      columns: initialColumns\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchData = () => dispatch => {\r\n  const columns = localStorage.getItem('columns');\r\n  return dispatch({\r\n    type: 'FETCH_DATA',\r\n    columns: JSON.parse(columns)\r\n  });\r\n};\r\n\r\nexport const onAddCol = (colTitle, setIsAdding) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  setIsAdding(false);\r\n\r\n  // copy columns array\r\n  let newColumns;\r\n  state.columns !== null ? newColumns = [...state.columns] : newColumns = [];\r\n\r\n  // push new column in temporary array\r\n  colTitle !== '' && colTitle !== null ? newColumns.push({ title: colTitle, cards: [] }) : alert('Set column name please');\r\n\r\n  // set new columns array to local storage\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'ADD_COLUMN',\r\n    columns: newColumns,\r\n    newCardText: ''\r\n  });\r\n};\r\n\r\nexport const onDelCol = colIndex => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // copy current columns array\r\n  let newColumns = [...state.columns];\r\n\r\n  // delete clicked column\r\n  newColumns.splice(colIndex, 1);\r\n\r\n  localStorage.setItem('columns', JSON.stringify(newColumns));\r\n\r\n  return dispatch({\r\n    type: 'DELETE_COLUMN',\r\n    columns: newColumns\r\n  });\r\n};\r\n","import React, { useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Icon, Button } from 'antd';\r\n\r\nimport { setNewCardText } from '../../actions';\r\n\r\nimport './card-edit.sass';\r\n\r\nconst CardEditBlock = props => {\r\n  const [inputText, setInputText] = useState(props.label);\r\n\r\n  const measuredRef = useCallback(node => {\r\n    if (node !== null) {\r\n      node.focus();\r\n      node.setSelectionRange(0, node.value.length);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className='card-edit-block'>\r\n      <textarea ref={measuredRef} onChange={e => setInputText(e.target.value)} value={inputText} rows='3'></textarea>\r\n      <div className='btn-wrapper'>\r\n        <Button\r\n          onClick={() => {\r\n            props.setNewCardText(inputText, props.colIndex, props.cardIndex);\r\n            props.setIsEdit(false);\r\n          }}\r\n          className='card-edit-block-btn'\r\n          type='primary'\r\n          size='small'\r\n        >\r\n          OK\r\n        </Button>\r\n        <Icon\r\n          onClick={() => {\r\n            setInputText(props.label);\r\n            props.setIsEdit(false);\r\n          }}\r\n          className='card-edit-block-close'\r\n          type='close'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setNewCardText: (text, colIndex, cardIndex) => dispatch(setNewCardText(text, colIndex, cardIndex))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(CardEditBlock);\r\n","import React, { useState } from 'react';\r\nimport { Icon } from 'antd';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { onDelCard } from '../../actions';\r\n\r\nimport './card.sass';\r\nimport CardEditBlock from '../card-edit/card-edit';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Card = props => {\r\n  const [isEdit, setIsEdit] = useState(false);\r\n\r\n  return (\r\n    <Draggable draggableId={`card-${props.colIndex}-${props.cardIndex}`} index={props.cardIndex}>\r\n      {provided => (\r\n        <div className='card' ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n          <Icon onClick={() => props.onDelCard(props.colIndex, props.cardIndex)} className='card-btn card-close' type='close' />\r\n          <Icon onClick={() => setIsEdit(!isEdit)} className='card-btn card-edit' type='edit' />\r\n          {isEdit ? <CardEditBlock colIndex={props.colIndex} cardIndex={props.cardIndex} setIsEdit={setIsEdit} label={props.label} /> : <span>{props.label}</span>}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDelCard: (colIndex, cardIndex) => dispatch(onDelCard(colIndex, cardIndex))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Card);\r\n","import React from 'react';\r\nimport { Icon } from 'antd';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { onDelCol } from '../../actions';\r\n\r\nimport './column.sass';\r\nimport ButtonAdd from '../button-add/buton-add';\r\nimport Card from '../card/card';\r\n\r\nconst Column = props => {\r\n  return (\r\n    <div className={!props.empty ? 'column' : !props.isAddingColumn ? 'column empty' : 'column add-column'}>\r\n      {!props.empty ? (\r\n        <div>\r\n          <header className='column__title'>{props.title}</header>\r\n\r\n          <Droppable type='CARDS' droppableId={`column-${props.index}`}>\r\n            {provided => (\r\n              <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                <div className='column__inner'>\r\n                  <div className='column__items'>\r\n                    {props.cards.map((card, index) => (\r\n                      <Card key={index} colIndex={props.index} cardIndex={index} label={card}></Card>\r\n                    ))}\r\n                    {provided.placeholder}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n          <ButtonAdd text={'Add new card'} index={props.index} />\r\n          <Icon onClick={() => props.onDelCol(props.index)} className='close-column-btn' type='close' />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          {!props.isAddingColumn && (\r\n            <div>\r\n              <header className='column__title'>пвава</header>\r\n              <Icon className='close-column-btn' type='close' />\r\n            </div>\r\n          )}\r\n          <ButtonAdd text={props.isAddingColumn ? 'Add new column' : 'Add new card'} isAddingColumn={props.isAddingColumn && true} index={props.index} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onDelCol: colIndex => dispatch(onDelCol(colIndex))\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Column);\r\n","import React from 'react';\nimport './app.sass';\nimport { connect } from 'react-redux';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nimport { fetchData, reorderCards, setInitialColumns } from '../../actions';\n\nimport Column from '../column/column';\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.fetchData();\n    this.props.setInitialColumns();\n  }\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n    if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) {\n      return;\n    }\n\n    this.props.reorderCards({\n      source,\n      destination\n    });\n  };\n\n  render() {\n    return (\n      <div className='App'>\n        {this.props.columns ? (\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.props.columns.map((column, index) => (\n              <Column title={column.title} cards={column.cards} index={index} key={Math.random()} onReorder={reorderCards} />\n            ))}\n          </DragDropContext>\n        ) : null}\n        <Column empty isAddingColumn key={9999} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    columns: state.columns\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchData: () => dispatch(fetchData()),\n    reorderCards: ({ source, destination }) => dispatch(reorderCards({ source, destination })),\n    setInitialColumns: () => dispatch(setInitialColumns())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initialState = {\r\n  columns: [],\r\n  newCardText: null\r\n};\r\n\r\nfunction trello(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_INITIAL_COLUMNS':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      }\r\n    case 'FETCH_DATA':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      };\r\n    case 'ADD_NEW_CARD_TEXT':\r\n      return {\r\n        ...state,\r\n        newCardText: action.payload\r\n      };\r\n    case 'ADD_CARD':\r\n      return {\r\n        ...state,\r\n        columns: action.columns,\r\n        newCardText: action.newCardText\r\n      };\r\n    case 'DELETE_CARD':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      };\r\n    case 'ADD_COLUMN':\r\n      return {\r\n        ...state,\r\n        columns: action.columns,\r\n        newCardText: action.newCardText\r\n      };\r\n    case 'DELETE_COLUMN':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      };\r\n    case 'EDIT_CARD':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      };\r\n    case 'REORDER_CARDS':\r\n      return {\r\n        ...state,\r\n        columns: action.columns\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default trello;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport trello from './reducers/trello';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(trello, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/app\";\nimport { Provider } from \"react-redux\";\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}